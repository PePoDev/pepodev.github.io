---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const allPosts = await getCollection("blog", ({ data }) => {
    return data.draft !== true;
  });

  const allTags = [...new Set(allPosts.flatMap((post) => post.data.tags))];

  return allTags.map((tag) => {
    const filteredPosts = allPosts
      .filter((post) => post.data.tags.includes(tag))
      .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

    return {
      params: { tag },
      props: { posts: filteredPosts, tag },
    };
  });
}

const { posts, tag } = Astro.props;
---

<BaseLayout
  title={`Posts tagged "${tag}"`}
  description={`Browse all blog posts tagged with "${tag}".`}
>
  <section class="tag-page section">
    <div class="container">
      <div class="tag-header">
        <h1>Posts tagged with <span class="tag-name">"{tag}"</span></h1>
        <p class="post-count">
          {posts.length}
          {posts.length === 1 ? "post" : "posts"} found
        </p>
        <a href="/blog" class="back-link">← Back to all posts</a>
      </div>

      <div class="posts-grid">
        {
          posts.map((post) => {
            const formattedDate = new Date(
              post.data.pubDate
            ).toLocaleDateString("en-US", {
              year: "numeric",
              month: "short",
              day: "numeric",
            });

            return (
              <article class="post-card card">
                {post.data.image && (
                  <a href={`/blog/${post.slug}`} class="post-card-image">
                    <img
                      src={post.data.image.url}
                      alt={post.data.image.alt}
                      loading="lazy"
                    />
                  </a>
                )}
                <div class="post-card-content">
                  <div class="post-card-meta">
                    <time datetime={post.data.pubDate.toISOString()}>
                      {formattedDate}
                    </time>
                  </div>

                  <h2 class="post-card-title">
                    <a href={`/blog/${post.slug}`}>{post.data.title}</a>
                  </h2>

                  <p class="post-card-description">{post.data.description}</p>

                  {post.data.tags.length > 0 && (
                    <div class="post-card-tags">
                      {post.data.tags.map((t) => (
                        <a
                          href={`/blog/tag/${t}`}
                          class="tag"
                          class:list={{ active: t === tag }}
                        >
                          {t}
                        </a>
                      ))}
                    </div>
                  )}

                  <a href={`/blog/${post.slug}`} class="read-more">
                    Read more →
                  </a>
                </div>
              </article>
            );
          })
        }
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .tag-page {
    padding: var(--spacing-xl) 0;
  }

  .tag-header {
    text-align: center;
    margin-bottom: var(--spacing-2xl);
  }

  .tag-header h1 {
    font-size: clamp(2rem, 4vw, 3rem);
    margin-bottom: var(--spacing-sm);
  }

  .tag-name {
    color: var(--color-primary);
  }

  .post-count {
    color: var(--color-text-light);
    font-size: 1.125rem;
    margin-bottom: var(--spacing-md);
  }

  .back-link {
    display: inline-block;
    color: var(--color-primary);
    font-weight: 600;
    padding: var(--spacing-xs) var(--spacing-md);
    border: 2px solid var(--color-primary);
    border-radius: var(--border-radius);
    transition: all var(--transition-fast);
  }

  .back-link:hover {
    background-color: var(--color-primary);
    color: white;
  }

  /* Posts Grid */
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: var(--spacing-xl);
  }

  .post-card {
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: transform var(--transition-normal);
  }

  .post-card:hover {
    transform: translateY(-8px);
  }

  .post-card-image {
    position: relative;
    overflow: hidden;
    aspect-ratio: 16 / 9;
    display: block;
  }

  .post-card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-normal);
  }

  .post-card:hover .post-card-image img {
    transform: scale(1.05);
  }

  .post-card-content {
    padding: var(--spacing-lg);
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .post-card-meta {
    margin-bottom: var(--spacing-sm);
  }

  .post-card-meta time {
    color: var(--color-text-light);
    font-size: 0.875rem;
  }

  .post-card-title {
    font-size: 1.5rem;
    margin-bottom: var(--spacing-sm);
    line-height: 1.3;
  }

  .post-card-title a {
    color: var(--color-text);
    transition: color var(--transition-fast);
  }

  .post-card-title a:hover {
    color: var(--color-primary);
  }

  .post-card-description {
    color: var(--color-text-light);
    margin-bottom: var(--spacing-md);
    line-height: 1.6;
    flex: 1;
  }

  .post-card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-md);
  }

  .post-card-tags .tag {
    display: inline-block;
    padding: 0.25rem 0.625rem;
    background-color: var(--color-surface);
    color: var(--color-primary);
    border-radius: calc(var(--border-radius) / 2);
    font-size: 0.8125rem;
    font-weight: 500;
    border: 1px solid var(--color-border);
    transition: all var(--transition-fast);
  }

  .post-card-tags .tag:hover,
  .post-card-tags .tag.active {
    background-color: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }

  .read-more {
    color: var(--color-primary);
    font-weight: 600;
    font-size: 0.9375rem;
    transition: color var(--transition-fast);
    margin-top: auto;
  }

  .read-more:hover {
    color: var(--color-secondary);
  }

  @media (max-width: 768px) {
    .posts-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
